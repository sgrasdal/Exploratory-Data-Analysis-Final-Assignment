inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
inv_matrix <- x$get()
inv <- minverse(inv_matrix, ...)
x$setinverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
my_Matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
## This function sets and retrieves the matrix and the inverse matrix
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {            #initializes inverse as NULL
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve(x)) inv <<- solve(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {            #initializes inverse as NULL
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- solve(x)
getinverse <- function() inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = inverse)
}
my_Matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
## This function sets and retrieves the matrix and the inverse matrix
library(MASS)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {            #initializes inverse as NULL
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
my_Matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_Matrix <- makeCacheMatrix(matrix(1:9, 3, 3))
my_Matrix$get()
#Testing my code
my_Matrix <- makeCacheMatrix(matrix(1:9, 3, 3))
my_Matrix$get()
cacheSolve(my_Matrix)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
inv_matrix <- x$get()
inv <- inverse(inv_matrix, ...)
x$setinverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(my_Matrix)
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
inv_matrix <- x$get()
inv <- solve(inv_matrix, ...)
x$setinverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(my_Matrix)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
matrix_to_invert <- x$get()
inv <- solve(matrix_to_invert, ...)
x$setinverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
cacheSolve(my_Matrix)
#Testing my code
my_Matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_Matrix$get()
cacheSolve(my_Matrix)
#Testing my code
my_Matrix <- makeCacheMatrix(matrix(6:10, 2, 2))
my_Matrix$get()
cacheSolve(my_Matrix)
#Testing my code
my_Matrix <- makeCacheMatrix(matrix(6:9, 2, 2))
my_Matrix$get()
cacheSolve(my_Matrix)
cacheSolve(my_Matrix)
swrilrl()
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
inside.names(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4 replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replacement = FALSE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips(sample(size = 100, x = c(0,1), prob = c(.3, .7)))
flips <- sample(size = 100, x = c(0,1), prob = c(.3, .7)))
flips <- sample(size = 100, x = c(0,1), prob = c(.3, .7))
flips <- sample(size = 100, x = c(0,1), prob = c(.3, .7), replace = TRUE)
flips
sum(flips, x = 1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = .7)
flips2 <- rbinom(1, size = 100, prob = .7)
flips2 <- rbinom(n = 100, size = 1, prob = .7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(mean = 100, sd = 25)
rnorm(mean = 100, sd = 25, n = 10)
rpoisson(mean = 10)
rpois(mean = 10)
?rpois
rpois(n= 5)
rpois(n= 5, lambda = 10)
replicate(rpois(n= 5, lambda = 10))
replicate(rpois(5, 10))
replicate(100, rpois(5, 10))
my_poise <- replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <_ colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plots(cars$speed, cars$dist)
plot(cars$speed, cars$dist)
plot(cars $dist, cars$speed)
plot(cars$speed, cars$dist, xlab = "Speed")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars$speed, cars$dist, ylab = "Stopping Distance")
plot(cars$speed, cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars $dist, cars$speed, main "My Plot")
plot(cars $dist, cars$speed, main = "My Plot")
plot(cars main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
plot(cars, pch = 2)
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(data = mtcars,mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swril ()
swirl()
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(ppm, abline = 12)
abline(ppm, h = 12)
abline( h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd )
abline(v = 12, lwd =2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution, col = "red")
boxplot(formula = pm25~region, data =pollution, col = "red")
par(mfrow = c(2,1), mar = c(4,4,2,1))
east <- subset(pollution, region )
east <- subset(pollution)
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west"), col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
call(pollution, plot)
plot(pollution, call())
plot(pollution, call(plot()))
plot <- function(pollution, plot)
{}
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(plot(pllution$latitude, pollution$ppm, col = pollution$region))
with(plot(pllution$latitude, pollution$ppm))
jjh
with(plot(pllution$latitude, pollution$ppm, col == pollution$region))
with(plot(pllution$latitude, pollution$ppm) col = pllution$region)
with(plot(pllution$latitude, pollution$ppm), col = pllution$region)
with(plot(pllution$latitude, pollution$ppm, col == pollution$region))
with(plot(pllution$latitude, pollution$ppm, col = pollution$region))
with(plot, pllution$latitude, pollution$ppm, col = pollution$region)
with(plot( pollution$latitude, pollution$ppm, col = pollution$region))
with(plot( pollution$latitude, pollution$ppm), col = pollution$region)
plot(pollution$latitude, pollution$ppm, col = pollution$region)
plot(pollution$latitude,ppm, col = pollution$region)
plot(pollution$latitude,ppm, col = polluti
)
plot(pollution$latitude, ppm, col=pollution$region)
with(pollution, plot(latitude, pm25))
plot(pollution$latitude, ppm, col = pollution$region)
base::plot(pollution$latitude, ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
exit
Exot
0
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram())
plot(as.dendrogram(hc))
abline(h = 1.5m col = "blue")
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
5
6
1
2
3
4
5
5
6
7
8
9
10
11
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMartix, col = cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
dim(om)
dim(pm)
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0[Sample.Value]
x0 <- subset(pm0, Sample.Value)
x0 <- subset(pm0$Sample.Value)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summar(x0)
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log(x0), log(x1))
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- asDate(as.character(dates), "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 %in% county.site)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(County.Code == 63 & 2008 %in% Site.ID)
pm0sub <- subset(pm0 ,County.Code == 63 & 2008 %in% Site.ID)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
xsub0 <- pm0sub$Sample.Value
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(median(x0sub), lwd = 2, na.rm = TRUE)
abline(median(x0sub, na.rm = TRUE), lwd = 2)
abline(a = median(x0sub, na.rm = TRUE), lwd = 2)
abline(median(x0sub, na.rm = TRUE), lwd = 2)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mgr)
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y,]
setwd("C:/Users/sgras/OneDrive/Documents/School/WNTR 2024/Exploratory Data Analysis/Week4/Assignment")
library(dplyr)
NEI <- readRDS("exdata_data_NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("exdata_data_NEI_data/Source_Classification_Code.rds")
emissions_by_year <- NEI %>%
group_by(year) %>%
summarize(total_emissions = sum(Emissions))
with(emissions_by_year, barplot(total_emissions, names.arg = year, xlab = "Year", ylab = "PM2.5 Emissions (tons)", main = "Total PM2.5 Emissions from All Sources"))
dev.copy(png,'plot1.png')
dev.off()
with(emissions_by_year, barplot(total_emissions, names.arg = year, xlab = "Year", ylab = "PM2.5 Emissions (tons)", main = "Total PM2.5 Emissions in the U.S. from All Sources"))
dev.copy(png,'plot1.png')
dev.off()
setwd("C:/Users/sgras/OneDrive/Documents/School/WNTR 2024/Exploratory Data Analysis/Week4/Assignment")
library(dplyr)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
emissions_by_year <- NEI %>%
filter(fips == "24510") %>%
group_by(year) %>%
summarize(total_emissions = sum(Emissions))
with(emissions_by_year, barplot(total_emissions, names.arg = year, xlab = "Year", ylab = "PM2.5 Emissions (tons)", main = "Total PM2.5 Emissions from Baltimore City Sources"))
dev.copy(png,'plot2.png')
dev.off()
setwd("C:/Users/sgras/OneDrive/Documents/School/WNTR 2024/Exploratory Data Analysis/Week4/Assignment")
library(dplyr)
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
emissions_by_year <- NEI %>%
filter(fips == "24510") %>%
group_by(year, type) %>%
summarize(total_emissions = sum(Emissions))
emissions_by_year$year <- as.factor(emissions_by_year$year)
ggplot(emissions_by_year, aes(x=year, y=total_emissions)) + geom_bar(stat="identity") + facet_grid(. ~ type) + labs(x="Year", y="PM2.5 Emissions (tons)") + ggtitle("Baltimore City PM2.5 Emissions by Type")
dev.copy(png,'plot3.png')
dev.off()
setwd("C:/Users/sgras/OneDrive/Documents/School/WNTR 2024/Exploratory Data Analysis/Week4/Assignment")
library(dplyr)
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
emissions_by_year <- NEI %>%
filter(fips == "24510") %>%
group_by(year, type) %>%
summarize(total_emissions = sum(Emissions))
emissions_by_year$year <- as.factor(emissions_by_year$year)
ggplot(emissions_by_year, aes(x=year, y=total_emissions)) +
geom_bar(stat="identity") +
facet_grid(. ~ type) +
labs(x="Year", y="PM2.5 Emissions (tons)") +
ggtitle("Baltimore City PM2.5 Emissions by Type")
dev.copy(png,'plot3.png')
dev.off()
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
coal_SCCs <- SCC %>%
filter(grepl("coal", EI.Sector, ignore.case=TRUE)) %>%
select(SCC)
emissions_by_year <- NEI %>%
filter(SCC %in% coal_SCCs$SCC) %>%
group_by(year) %>%
summarize(total_emissions = sum(Emissions))
emissions_by_year$year <- as.factor(emissions_by_year$year)
ggplot(emissions_by_year, aes(x=year, y=total_emissions)) + geom_bar(stat="identity") + labs(x="Year", y="PM2.5 Emissions (tons)") + ggtitle("US PM2.5 Emissions from Coal Related Sources")
dev.copy(png,'plot4.png')
dev.off()
setwd("C:/Users/sgras/OneDrive/Documents/School/WNTR 2024/Exploratory Data Analysis/Week4/Assignment")
library(dplyr)
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
emissions_by_year <- NEI %>%
filter(fips == "24510" & type == "ON-ROAD") %>%
group_by(year) %>%
summarize(total_emissions = sum(Emissions))
emissions_by_year$year <- as.factor(emissions_by_year$year)
ggplot(emissions_by_year, aes(x=year, y=total_emissions)) +
geom_bar(stat="identity") +
labs(x="Year", y="PM2.5 Emissions (tons)") +
ggtitle("Baltimore City PM2.5 Emissions from Vehicle Related Sources")
dev.copy(png,'plot5.png')
setwd("C:/Users/sgras/OneDrive/Documents/School/WNTR 2024/Exploratory Data Analysis/Week4/Assignment")
library(dplyr)
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
emissions_by_year <- NEI %>%
filter(fips %in% c("24510", "06037") & type == "ON-ROAD") %>%
group_by(year, fips) %>%
summarize(total_emissions = sum(Emissions))
emissions_by_year$year <- as.factor(emissions_by_year$year)
emissions_by_year$county_name <- factor(emissions_by_year$fips, levels=c("06037", "24510"), labels=c("Los Angeles County", "Baltimore City"))
ggplot(emissions_by_year, aes(x=year, y=total_emissions)) +
geom_bar(stat="identity", aes(fill=county_name), position = "dodge") +
guides(fill=guide_legend(title=NULL)) +
labs(x="Year", y="PM2.5 Emissions (tons)") +
ggtitle("Vehicle PM2.5 Emissions - Baltimore City and LA County") +
theme(legend.position="bottom")
dev.copy(png,'plot6.png')
dev.off()
setwd("C:/Users/sgras/OneDrive/Documents/School/WNTR 2024/Exploratory Data Analysis/Week4/Assignment")
library(dplyr)
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
emissions_by_year <- NEI %>%
filter(fips %in% c("24510", "06037") & type == "ON-ROAD") %>%
group_by(year, fips) %>%
summarize(total_emissions = sum(Emissions))
emissions_by_year$year <- as.factor(emissions_by_year$year)
emissions_by_year$county_name <- factor(emissions_by_year$fips, levels=c("06037", "24510"), labels=c("Los Angeles County", "Baltimore City"))
ggplot(emissions_by_year, aes(x=year, y=total_emissions)) +
geom_bar(stat="identity", aes(fill=county_name), position = "dodge") +
guides(fill=guide_legend(title=NULL)) +
labs(x="Year", y="PM2.5 Emissions (tons)") +
ggtitle("Vehicle PM2.5 Emissions - Baltimore City and LA County") +
theme(legend.position="bottom")
dev.copy(png,'plot6.png')
dev.off()
